(()=>{var e={427:(e,t,r)=>{const o=r(942),a=r(431);r(922),e.exports=function(){return{attacked:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(e){const t=document.querySelector(".leftGrid"),r=document.querySelector(".rightGrid");let o=[],a=[0,1,2,3,4,5,6,7,8,9];a.forEach((e=>{for(let t=0;t<a.length;t++)o.push([e,a[t]])}));for(let a of o){let o=document.createElement("div");"player"==e?(o.classList.add("leftCells"),o.setAttribute("id",`left${[a[0],a[1]]}`),t.appendChild(o)):(o.classList.add("rightCells"),o.setAttribute("id",`right${[a[0],a[1]]}`),r.appendChild(o))}},placeShip(e,t,r){if(t[1]+e.length>10)return console.log("doh"),!1;const i=`${e.name}Hitbox`;for(let s=0;s<e.length;s++){const e=t[0],h=t[1]+s;this[i].push([e,h]),"player"==r?o([e,h],"green"):a([e,h],"green")}return this[i]},receiveAttack(e){this.attacked.push(e),console.log(this.attacked);const t=[this.carrierHitbox,this.battleshipHitbox,this.destroyerHitbox,this.submarineHitbox,this.patrolboatHitbox];for(let r of t){for(let t of r){if(console.log(t),t[0]==e[0]&&t[1]==e[1]){o(e,"red");break}o(e,"white")}break}return e},allShipsSunk:e=>e.every((e=>e.isSunk()))}}},942:e=>{e.exports=function(e,t){console.log("e"),document.getElementById(`left${e[0]},${e[1]}`).style.backgroundColor=t}},431:e=>{e.exports=function(e,t){document.getElementById(`right${e[0]},${e[1]}`).style.backgroundColor=t}},922:e=>{e.exports=function(e,t,r){return{length:e,name:t,hit:r,gotHit(){if(e>r)return console.log("test"),this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,r),i.exports}(()=>{const e=r(922),t=r(427);r(942),r(431);class o{constructor(e,t){this.name="player",this.board=e,this.carrier=this.createCarrier(),this.battleship=this.createBattleship(),this.destroyer=this.createDestroyer(),this.submarine=this.createSubmarine(),this.patrolboat=this.createPatrolboat(),this.ships=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrolboat],this.enemy="enemy",this.enemyBoard=t,this.enemyCarrier=this.createCarrier(),this.enemyBattleship=this.createBattleship(),this.enemyDestroyer=this.createDestroyer(),this.enemySubmarine=this.createSubmarine(),this.enemyPatrolboat=this.createPatrolboat()}attack(){"player"==this.name&&document.querySelectorAll(".rightCells").forEach((e=>{e.addEventListener("click",(()=>{setTimeout((()=>{this.board.receiveAttack(this.cpuAttackCoord())}),200)}))}))}cpuAttackCoord(){let e=this.generateCoord();for(;this.board.attacked.some((t=>t[0]==e[0]&&t[1]==e[1]));)e=this.generateCoord();return e}generateCoord(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}generateShipCoord(e){return[Math.floor(10*Math.random()),Math.floor(Math.random()*(10-e.length))]}placeCpuShips(){let e=[this.enemyCarrier,this.enemyBattleship,this.enemyDestroyer,this.enemySubmarine,this.enemyPatrolboat];for(let t of e){let e=[this.enemyBoard.carrierHitbox,this.enemyBoard.battleshipHitbox,this.enemyBoard.destroyerHitbox,this.enemyBoard.submarineHitbox,this.enemyBoard.patrolboatHitbox],r=[].concat(...e),o=this.generateShipCoord(t);for(;r.some((e=>e[1]==o[1]+t.length||e[0]==o[0]&&e[1]==o[1]));)o=this.generateShipCoord(t);this.enemyBoard.placeShip(t,o,"enemy"),console.log(e)}}checkGameOver(){this.board.allShipsSunk(this.ships)&&alert("You lost u fkn noob")}createPlayerBoard(){this.board.createBoard(this.name)}createEnemyBoard(){this.enemyBoard.createBoard("enemy")}createCarrier(){return e(5,"carrier",0)}createBattleship(){return e(4,"battleship",0)}createDestroyer(){return e(3,"destroyer",0)}createSubmarine(){return e(3,"submarine",0)}createPatrolboat(){return e(2,"patrolboat",0)}}!function(){let e=t(),r=t(),a=new o(r,e);a.createPlayerBoard(),a.createEnemyBoard(),a.placeCpuShips(),a.board.placeShip(a.carrier,[5,4],"player"),a.attack()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,