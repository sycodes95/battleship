(()=>{var t={427:(t,e,r)=>{const o=r(942);r(922),t.exports=function(){return{board:[],attacked:[],overallHitbox:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(t){let e=[],r=[0,1,2,3,4,5,6,7,8,9];r.forEach((t=>{for(let o=0;o<r.length;o++)e.push([t,r[o]])})),this.board=e;for(let e of this.board){let r=document.createElement("div");r.classList.add("rightCells"),r.setAttribute("id",`${[e[0],e[1]]}`),t.appendChild(r)}return e},placeShip(t,e){if(e[1]+t.length>10)return;const r=`${t.name}Hitbox`;for(let o=0;o<t.length;o++){const t=e[0],i=e[1]+o;this[r].push([t,i]),this.overallHitbox.push([t,i])}return this[r]},receiveAttack(t,e){this.attacked.push(t);for(let e of this.overallHitbox){if(e[0]==t[0]&&e[1]==t[1]){o(t,"red");break}o(t,"white")}return e[0].isSunk()&&e[1].isSunk()&&e[2].isSunk()&&e[3].isSunk()&&e[4].isSunk()?"game over":t}}}},942:t=>{t.exports=function(t,e){document.getElementById(`${t[0]},${t[1]}`).style.backgroundColor=e}},785:t=>{t.exports=function(){}},922:t=>{t.exports=function(t,e,r,o){return{length:t,name:e,hit:r,sunk:o,gotHit(){if(t>r)return this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},e={};function r(o){var i=e[o];if(void 0!==i)return i.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,r),a.exports}(()=>{const t=r(922),e=r(427);r(942),r(785),function(){let r=document.querySelector(".leftGrid");const o=t(5,"carrier"),i=t(4,"battleship"),a=t(3,"destroyer"),n=t(3,"submarine"),s=t(2,"patrolboat"),l=e();l.createBoard(r),l.placeShip(o,[5,4]),l.placeShip(i,[2,6]),l.placeShip(a,[1,5]),l.placeShip(n,[4,4]),l.placeShip(s,[6,4]);const c=[o,i,a,n,s];Math.floor(9*Math.random()),Math.floor(9*Math.random()),l.receiveAttack([5,4],c),console.log(o.hit)}(),function(){const r=document.querySelector(".rightGrid"),o=t(5,"carrier"),i=t(4,"battleship"),a=t(3,"destroyer"),n=t(3,"submarine"),s=t(2,"patrolboat"),l=e();l.createBoard(r),l.placeShip(o,[5,4]),l.placeShip(i,[2,6]),l.placeShip(a,[1,5]),l.placeShip(n,[4,4]),l.placeShip(s,[5,4])}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,