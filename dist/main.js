(()=>{var e={427:(e,t,r)=>{const i=r(942),o=r(431);r(922),e.exports=function(){return{attacked:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(e){const t=document.querySelector(".leftGrid"),r=document.querySelector(".rightGrid");let i=[],o=[0,1,2,3,4,5,6,7,8,9];o.forEach((e=>{for(let t=0;t<o.length;t++)i.push([e,o[t]])}));for(let o of i){let i=document.createElement("div");"player"==e?(i.classList.add("leftCells"),i.setAttribute("id",`left${[o[0],o[1]]}`),t.appendChild(i)):(i.classList.add("rightCells"),i.setAttribute("id",`right${[o[0],o[1]]}`),r.appendChild(i))}},placeShip(e,t,r){if(t[1]+e.length>10)return!1;const a=`${e.name}Hitbox`;for(let s=0;s<e.length;s++){const e=t[0],h=t[1]+s;this[a].push([e,h]),"player"==r?i([e,h],"green"):o([e,h],"green")}return this[a]},receiveAttack(e){this.attacked.push(e);const t=[this.carrierHitbox,this.battleshipHitbox,this.destroyerHitbox,this.submarineHitbox,this.patrolboatHitbox];for(let r of t){for(let t of r){if(t[0]==e[0]&&t[1]==e[1]){i(e,"red");break}i(e,"white")}break}return e},allShipsSunk:e=>e.every((e=>e.isSunk()))}}},942:e=>{e.exports=function(e,t){document.getElementById(`left${e[0]},${e[1]}`).style.backgroundColor=t}},431:e=>{e.exports=function(e,t){document.getElementById(`right${e[0]},${e[1]}`).style.backgroundColor=t}},922:e=>{e.exports=function(e,t,r){return{length:e,name:t,hit:r,gotHit(){if(e>r)return console.log("test"),this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},t={};function r(i){var o=t[i];if(void 0!==o)return o.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,r),a.exports}(()=>{const e=r(922),t=r(427),i=(r(942),r(431));class o{constructor(e,t){this.name="player",this.board=e,this.carrier=this.createCarrier(),this.battleship=this.createBattleship(),this.destroyer=this.createDestroyer(),this.submarine=this.createSubmarine(),this.patrolboat=this.createPatrolboat(),this.ships=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrolboat],this.enemy="enemy",this.enemyBoard=t,this.enemyCarrier=this.createCarrier(),this.enemyBattleship=this.createBattleship(),this.enemyDestroyer=this.createDestroyer(),this.enemySubmarine=this.createSubmarine(),this.enemyPatrolboat=this.createPatrolboat(),this.enemyShips=[this.enemyCarrier,this.enemyBattleship,this.enemyDestroyer,this.enemySubmarine,this.enemyPatrolboat],this.enemyHitboxes=[this.enemyBoard.carrierHitbox,this.enemyBoard.battleshipHitbox,this.enemyBoard.destroyerHitbox,this.enemyBoard.submarineHitbox,this.enemyBoard.patrolboatHitbox]}attack(){"player"==this.name&&document.querySelectorAll(".rightCells").forEach((e=>{e.addEventListener("click",(()=>{let t=this.convertIdToCoord(e),r=this.enemyBoard.attacked;const o=this.enemyHitboxes.reduce(((e,t)=>e.concat(t)),[]);if(r.length<1){for(let e of o){if(e[0]==t[0]&&e[1]==t[1]){i(t,"red"),this.findAttackedShip(t);break}i(t,"white")}r.push(t)}if(!r.some((e=>e[0]==t[0]&&e[1]==t[1]))){for(let e of o){if(e[0]==t[0]&&e[1]==t[1]){i(t,"red"),this.findAttackedShip(t);break}i(t,"white")}r.push(t),console.log(this.enemyBoard.attacked),setTimeout((()=>{this.board.receiveAttack(this.cpuAttackCoord())}),200)}}))}))}cpuAttackCoord(){let e=this.generateCoord();for(;this.board.attacked.some((t=>t[0]==e[0]&&t[1]==e[1]));)e=this.generateCoord();return e}generateCoord(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}generateShipCoord(e){return[Math.floor(10*Math.random()),Math.floor(Math.random()*(10-e.length))]}convertIdToCoord(e){return[parseInt(e.id.charAt(5)),parseInt(e.id.charAt(7))]}findAttackedShip(e){this.enemyHitboxes.some(((t,r)=>{for(let i of t)i[0]==e[0]&&i[1]==e[1]&&this.enemyShips[r].gotHit()}))}checkAttackedCoord(e){}placeCpuShips(){let e=[this.enemyCarrier,this.enemyBattleship,this.enemyDestroyer,this.enemySubmarine,this.enemyPatrolboat];for(let t of e){let e=[this.enemyBoard.carrierHitbox,this.enemyBoard.battleshipHitbox,this.enemyBoard.destroyerHitbox,this.enemyBoard.submarineHitbox,this.enemyBoard.patrolboatHitbox],r=[].concat(...e),i=this.generateShipCoord(t);for(;r.some((e=>e[0]==i[0]&&e[1]==i[1]+t.length||e[0]==i[0]&&e[1]==i[1]));)i=this.generateShipCoord(t);this.enemyBoard.placeShip(t,i,"enemy")}}checkGameOver(){this.board.allShipsSunk(this.ships)&&alert("You lost u fkn noob")}createPlayerBoard(){this.board.createBoard(this.name)}createEnemyBoard(){this.enemyBoard.createBoard("enemy")}createCarrier(){return e(5,"carrier",0)}createBattleship(){return e(4,"battleship",0)}createDestroyer(){return e(3,"destroyer",0)}createSubmarine(){return e(3,"submarine",0)}createPatrolboat(){return e(2,"patrolboat",0)}}!function(){let e=t(),r=t(),i=new o(r,e);i.createPlayerBoard(),i.createEnemyBoard(),i.placeCpuShips(),i.board.placeShip(i.carrier,[5,4],"player"),i.attack()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,