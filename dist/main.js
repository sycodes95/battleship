(()=>{var t={427:t=>{t.exports=function(){return{board:[],attacked:[],overallHitbox:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(){let t=[],e=[0,1,2,3,4,5,6,7,8,9];return e.forEach((r=>{for(let i=0;i<e.length;i++)t.push([r,e[i]])})),this.board=t,t},placeShip(t,e){if(e[1]+t.length>10)return;const r=`${t.name}Hitbox`;for(let i=0;i<t.length;i++){const t=e[0],o=e[1]+i;this[r].push([t,o]),this.overallHitbox.push([t,o])}return this[r]},receiveAttack(t){this.attacked.push(t);const e=[this.carrierHitbox,this.battleshipHitbox,this.destroyerHitbox,this.submarineHitbox,this.patrolboatHitbox],r=[carrier,battleship,destroyer,submarine,patrolboat];for(let i=0;i<e.length;i++)e[i].includes(t)&&r[i].gotHit();if(carrier.isSunk()&&battleship.isSunk()&&destroyer.isSunk()&&submarine.isSunk()&&patrolboat.isSunk())return"game over"}}}},942:t=>{t.exports=function(t){let e=document.querySelector(".leftGrid");t.forEach((t=>{let r=document.createElement("div");r.classList.add("leftCells"),r.setAttribute("id",`${[t[0],t[1]]}`),e.appendChild(r)}))}},785:t=>{t.exports=function(t,e,r){let i=document.querySelector(".rightGrid");for(let e of t){let t=document.createElement("div");t.classList.add("rightCells"),t.setAttribute("id",`${[e[0],e[1]]}`),i.appendChild(t),t.addEventListener("click",(()=>{console.log(r);for(let e of r){if(t.id==`${e[0]},${e[1]}`){t.style.backgroundColor="red",t.style.opacity="0.6";break}t.id!==`${e[0]},${e[1]}`&&(t.style.backgroundColor="white",t.style.opacity="0.1")}}))}}},922:t=>{t.exports=function(t,e,r,i){return{length:t,name:e,hit:r,sunk:i,gotHit(){if(t>r)return this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},e={};function r(i){var o=e[i];if(void 0!==o)return o.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,r),a.exports}(()=>{const t=r(922),e=r(427),i=r(942),o=r(785);!function(){const r=t(5,"carrier"),o=t(4,"battleship"),a=t(3,"destroyer"),s=t(3,"submarine"),l=t(2,"patrolboat"),n=e();n.createBoard(),n.placeShip(r,[5,4]),n.placeShip(o,[2,6]),n.placeShip(a,[1,5]),n.placeShip(s,[4,4]),n.placeShip(l,[5,4]),i(n.board)}(),function(){const r=t(5,"carrier"),i=t(4,"battleship"),a=t(3,"destroyer"),s=t(3,"submarine"),l=t(2,"patrolboat"),n=e();n.createBoard(),n.placeShip(r,[5,4]),n.placeShip(i,[2,6]),n.placeShip(a,[1,5]),n.placeShip(s,[4,4]),n.placeShip(l,[5,4]);const c=[n.carrierHitbox,n.battleshipHitbox,n.destroyerHitbox,n.submarineHitbox,n.patrolboatHitbox];o(n.board,c,n.overallHitbox)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,