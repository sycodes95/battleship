(()=>{var e={427:(e,t,r)=>{const i=r(942),o=r(431);r(922),e.exports=function(){return{attacked:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(e){const t=document.querySelector(".leftGrid"),r=document.querySelector(".rightGrid");let i=[],o=[0,1,2,3,4,5,6,7,8,9];o.forEach((e=>{for(let t=0;t<o.length;t++)i.push([e,o[t]])}));for(let o of i){let i=document.createElement("div");"player"==e?(i.classList.add("leftCells"),i.setAttribute("id",`left${[o[0],o[1]]}`),t.appendChild(i)):(i.classList.add("rightCells"),i.setAttribute("id",`right${[o[0],o[1]]}`),r.appendChild(i))}},placeShip(e,t,r){if(t[1]+e.length>10)return!1;const a=`${e.name}Hitbox`;for(let s=0;s<e.length;s++){const e=t[0],l=t[1]+s;this[a].push([e,l]),"player"==r?i([e,l],"green"):o([e,l],"green")}return this[a]},receiveAttack(e){this.attacked.push(e);const t=[this.carrierHitbox,this.battleshipHitbox,this.destroyerHitbox,this.submarineHitbox,this.patrolboatHitbox],r=t.reduce(((e,t)=>e.concat(t)),[]);console.log(t);let o=!1;for(let t of r)if(t[0]==e[0]&&t[1]==e[1]){o=!0;break}return i(e,o?"red":"white"),e},allShipsSunk:e=>e.every((e=>e.isSunk()))}}},942:e=>{e.exports=function(e,t){console.log(`left${e[0]},${e[1]}`),document.getElementById(`left${e[0]},${e[1]}`).style.backgroundColor=t}},431:e=>{e.exports=function(e,t){document.getElementById(`right${e[0]},${e[1]}`).style.backgroundColor=t}},922:e=>{e.exports=function(e,t,r){return{length:e,name:t,hit:r,gotHit(){if(e>r)return console.log("test"),this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},t={};function r(i){var o=t[i];if(void 0!==o)return o.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,r),a.exports}(()=>{const e=r(922),t=r(427),i=r(942),o=r(431);class a{constructor(e,t){this.name="player",this.board=e,this.carrier=this.createCarrier(),this.battleship=this.createBattleship(),this.destroyer=this.createDestroyer(),this.submarine=this.createSubmarine(),this.patrolboat=this.createPatrolboat(),this.ships=[this.carrier,this.battleship,this.destroyer,this.submarine,this.patrolboat],this.playerHitboxes=[this.board.carrierHitbox,this.board.battleshipHitbox,this.board.destroyerHitbox,this.board.submarineHitbox,this.board.patrolboatHitbox],this.enemy="enemy",this.enemyBoard=t,this.enemyCarrier=this.createCarrier(),this.enemyBattleship=this.createBattleship(),this.enemyDestroyer=this.createDestroyer(),this.enemySubmarine=this.createSubmarine(),this.enemyPatrolboat=this.createPatrolboat(),this.enemyShips=[this.enemyCarrier,this.enemyBattleship,this.enemyDestroyer,this.enemySubmarine,this.enemyPatrolboat],this.enemyHitboxes=[this.enemyBoard.carrierHitbox,this.enemyBoard.battleshipHitbox,this.enemyBoard.destroyerHitbox,this.enemyBoard.submarineHitbox,this.enemyBoard.patrolboatHitbox]}attack(){"player"==this.name&&document.querySelectorAll(".rightCells").forEach((e=>{e.addEventListener("click",(()=>{document.querySelector(".leftCommand").innerHTML="";let t=this.convertEnemyIdToCoord(e),r=this.enemyBoard.attacked;const i=this.enemyHitboxes.reduce(((e,t)=>e.concat(t)),[]);if(r.some((e=>e[0]==t[0]&&e[1]==t[1])))return;let a=!1;for(let e of i)if(e[0]==t[0]&&e[1]==t[1]){a=!0;break}a?(o(t,"red"),this.findEnemyAttackedShip(t),r.push(t)):(o(t,"white"),r.push(t)),console.log(this.carrier.hit),console.log(this.battleship.hit),console.log(this.destroyer.hit),console.log(this.submarine.hit),console.log(this.patrolboat.hit),this.checkGameOver()||setTimeout((()=>{let e=this.board.receiveAttack(this.cpuAttackCoord());this.findPlayerAttackedShip(e),console.log(e)}),200)}))}))}cpuAttackCoord(){let e=this.generateCoord();for(;this.board.attacked.some((t=>t[0]==e[0]&&t[1]==e[1]));)e=this.generateCoord();return e}generateCoord(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}generateShipCoord(e){return[Math.floor(10*Math.random()),Math.floor(Math.random()*(10-e.length))]}convertEnemyIdToCoord(e){return[parseInt(e.id.charAt(5)),parseInt(e.id.charAt(7))]}convertPlayerIdToCoord(e){return[parseInt(e.id.charAt(4)),parseInt(e.id.charAt(6))]}findEnemyAttackedShip(e){this.enemyHitboxes.some(((t,r)=>{for(let i of t)i[0]==e[0]&&i[1]==e[1]&&this.enemyShips[r].gotHit()}))}findPlayerAttackedShip(e){this.playerHitboxes.some(((t,r)=>{for(let i of t)i[0]==e[0]&&i[1]==e[1]&&this.ships[r].gotHit()}))}placePlayerShips(){const e=document.querySelector(".leftCommand");let t=document.createElement("div");t.textContent="Place your carrier!",t.style.color="white",e.appendChild(t),document.querySelectorAll(".leftCells").forEach((t=>{t.addEventListener("mouseenter",(()=>{let e=this.convertPlayerIdToCoord(t);if(this.board.carrierHitbox.length<1)for(let t=0;t<this.carrier.length;t++)document.getElementById(`left${e[0]},${e[1]+t}`).classList.add("ships");else if(this.board.battleshipHitbox.length<1)for(let t=0;t<this.battleship.length;t++)document.getElementById(`left${e[0]},${e[1]+t}`).classList.add("ships");else if(this.board.destroyerHitbox.length<1)for(let t=0;t<this.destroyerHitbox.length;t++)i([e[0],e[1]+t],"green");else if(this.board.submarineHitbox.length<1)for(let t=0;t<this.submarineHitbox.length;t++)i([e[0],e[1]+t],"green");else if(this.board.patrolboatHitbox.length<1)for(let t=0;t<this.patrolboatHitbox.length;t++)i([e[0],e[1]+t],"green")})),t.addEventListener("mouseout",(()=>{let e=this.convertPlayerIdToCoord(t);if(this.board.carrierHitbox.length<1)for(let t=0;t<this.carrier.length;t++)document.getElementById(`left${e[0]},${e[1]+t}`).classList.remove("ships");else if(this.board.battleshipHitbox.length<1)for(let t=0;t<this.battleship.length;t++)document.getElementById(`left${e[0]},${e[1]+t}`).classList.remove("ships");else if(this.board.destroyerHitbox.length<1)for(let t=0;t<this.destroyerHitbox.length;t++)i([e[0],e[1]+t],"black");else if(this.board.submarineHitbox.length<1)for(let t=0;t<this.submarineHitbox.length;t++)i([e[0],e[1]+t],"black");else if(this.board.patrolboatHitbox.length<1)for(let t=0;t<this.patrolboatHitbox.length;t++)i([e[0],e[1]+t],"black")})),t.addEventListener("click",(()=>{console.log("click");let r=this.convertPlayerIdToCoord(t);if(this.board.carrierHitbox.length<1){if(!this.board.placeShip(this.carrier,r,"player"))return;this.board.placeShip(this.carrier,r,"player"),e.innerHTML="";let t=document.createElement("div");t.textContent="Place your battleship!",t.style.color="white",e.appendChild(t)}else if(this.board.battleshipHitbox.length<1){if(!this.board.placeShip(this.battleship,r,"player"))return;this.board.placeShip(this.battleship,r,"player"),e.innerHTML="";let t=document.createElement("div");t.textContent="Place your destroyer!",t.style.color="white",e.appendChild(t)}else if(this.board.destroyerHitbox.length<1){if(!this.board.placeShip(this.destroyer,r,"player"))return;this.board.placeShip(this.destroyer,r,"player"),e.innerHTML="";let t=document.createElement("div");t.textContent="Place your submarine!",t.style.color="white",e.appendChild(t)}else if(this.board.submarineHitbox.length<1){if(!this.board.placeShip(this.submarine,r,"player"))return;this.board.placeShip(this.submarine,r,"player"),e.innerHTML="";let t=document.createElement("div");t.textContent="Place your patrolboat!",t.style.color="white",e.appendChild(t)}else if(this.board.patrolboatHitbox.length<1){if(!this.board.placeShip(this.patrolboat,r,"player"))return;this.board.placeShip(this.patrolboat,r,"player"),e.innerHTML="";let t=document.createElement("div");t.textContent="Begin assault!",t.style.color="red",e.appendChild(t),this.attack()}}))}))}placeCpuShips(){let e=[this.enemyCarrier,this.enemyBattleship,this.enemyDestroyer,this.enemySubmarine,this.enemyPatrolboat];for(let t of e){let e=[this.enemyBoard.carrierHitbox,this.enemyBoard.battleshipHitbox,this.enemyBoard.destroyerHitbox,this.enemyBoard.submarineHitbox,this.enemyBoard.patrolboatHitbox],r=[].concat(...e),i=this.generateShipCoord(t);for(;r.some((e=>e[0]==i[0]&&e[1]==i[1]+t.length||e[0]==i[0]&&e[1]==i[1]));)i=this.generateShipCoord(t);this.enemyBoard.placeShip(t,i,"enemy")}}checkGameOver(){const e=document.querySelectorAll(".leftCells"),t=document.querySelectorAll(".rightCells");return this.board.allShipsSunk(this.ships)?(e.forEach((e=>{e.remove()})),t.forEach((e=>{e.remove()})),alert("You lost u fkn noob"),s(),!0):!!this.enemyBoard.allShipsSunk(this.enemyShips)&&(e.forEach((e=>{e.remove()})),t.forEach((e=>{e.remove()})),alert("you won, what a G"),s(),!0)}createPlayerBoard(){this.board.createBoard(this.name)}createEnemyBoard(){this.enemyBoard.createBoard("enemy")}createCarrier(){return e(5,"carrier",0)}createBattleship(){return e(4,"battleship",0)}createDestroyer(){return e(3,"destroyer",0)}createSubmarine(){return e(3,"submarine",0)}createPatrolboat(){return e(2,"patrolboat",0)}}function s(){let e=t(),r=t(),i=new a(r,e);i.createPlayerBoard(),i.createEnemyBoard(),i.placePlayerShips(),i.placeCpuShips()}s()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,