(()=>{var t={427:(t,e,r)=>{const o=r(942);r(922),t.exports=function(){return{board:[],attacked:[],carrierHitbox:[],battleshipHitbox:[],destroyerHitbox:[],submarineHitbox:[],patrolboatHitbox:[],createBoard(t,e){let r=[],o=[0,1,2,3,4,5,6,7,8,9];o.forEach((t=>{for(let e=0;e<o.length;e++)r.push([t,o[e]])})),this.board=r;for(let e of this.board){let r=document.createElement("div");r.classList.add("rightCells"),r.setAttribute("id",`${[e[0],e[1]]}`),t.appendChild(r)}return r},placeShip(t,e){if(e[1]+t.length>10)return;const r=`${t.name}Hitbox`;for(let o=0;o<t.length;o++){const t=e[0],i=e[1]+o;this[r].push([t,i])}return this[r]},receiveAttack(t,e){this.attacked.push(t);const r=[this.carrierHitbox,this.battleshipHitbox,this.destroyerHitbox,this.submarineHitbox,this.patrolboatHitbox];for(let e of r){for(let i of e){if(console.log(i),i[0]==t[0]&&i[1]==t[1])return o(t,"red"),r.indexOf(e);o(t,"white")}break}return e[0].isSunk()&&e[1].isSunk()&&e[2].isSunk()&&e[3].isSunk()&&e[4].isSunk()?"game over":t},cpuEventListener(){document.querySelectorAll(".rightCells").forEach((t=>{t.addEventListener("click",(()=>{console.log(t.id)}))}))}}}},942:t=>{t.exports=function(t,e){document.getElementById(`${t[0]},${t[1]}`).style.backgroundColor=e}},431:t=>{t.exports=function(){}},922:t=>{t.exports=function(t,e,r){return{length:t,name:e,hit:r,gotHit(){if(t>r)return console.log("test"),this.hit+=1,this.hit},isSunk(){return this.length<=this.hit}}}}},e={};function r(o){var i=e[o];if(void 0!==i)return i.exports;var n=e[o]={exports:{}};return t[o](n,n.exports,r),n.exports}(()=>{const t=r(922),e=r(427);r(942),r(431),function(){console.log("pppp");let r=document.querySelector(".leftGrid");const o=t(5,"carrier",0),i=t(4,"battleship",0),n=t(3,"destroyer",0),a=t(3,"submarine",0),s=t(2,"patrolboat",0),c=e();c.createBoard(r),c.placeShip(o,[5,4]),c.placeShip(i,[2,6]),c.placeShip(n,[1,5]),c.placeShip(a,[4,4]),c.placeShip(s,[6,4]);const l=[o,i,n,a,s];Math.floor(9*Math.random()),Math.floor(9*Math.random()),l[c.receiveAttack([5,4],l)].gotHit()}(),function(){const r=document.querySelector(".rightGrid"),o=t(5,"carrier"),i=t(4,"battleship"),n=t(3,"destroyer"),a=t(3,"submarine"),s=t(2,"patrolboat"),c=e();c.createBoard(r),c.placeShip(o,[5,4]),c.placeShip(i,[2,6]),c.placeShip(n,[1,5]),c.placeShip(a,[4,4]),c.placeShip(s,[5,4]),c.cpuEventListener()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,